[{"/home/andres/makeitreal/repos/StackTraining/stack-training-frontend/src/reportWebVitals.js":"1","/home/andres/makeitreal/repos/StackTraining/stack-training-frontend/src/App.js":"2","/home/andres/makeitreal/repos/StackTraining/stack-training-frontend/src/pages/Home.js":"3","/home/andres/makeitreal/repos/StackTraining/stack-training-frontend/src/index.js":"4","/home/andres/makeitreal/repos/StackTraining/stack-training-frontend/src/components/signUp/signUpStyle.js":"5","/home/andres/makeitreal/repos/StackTraining/stack-training-frontend/src/pages/Dashboard.js":"6","/home/andres/makeitreal/repos/StackTraining/stack-training-frontend/src/config/theme.js":"7"},{"size":362,"mtime":1612283225787,"results":"8","hashOfConfig":"9"},{"size":450,"mtime":1612753070070,"results":"10","hashOfConfig":"9"},{"size":8848,"mtime":1612749347883,"results":"11","hashOfConfig":"9"},{"size":977,"mtime":1612752123063,"results":"12","hashOfConfig":"9"},{"size":1294,"mtime":1612754276354,"results":"13","hashOfConfig":"9"},{"size":89,"mtime":1612722941195,"results":"14","hashOfConfig":"9"},{"size":95,"mtime":1612751830995,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"aisqxi",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/andres/makeitreal/repos/StackTraining/stack-training-frontend/src/reportWebVitals.js",[],["33","34"],"/home/andres/makeitreal/repos/StackTraining/stack-training-frontend/src/App.js",[],"/home/andres/makeitreal/repos/StackTraining/stack-training-frontend/src/pages/Home.js",["35","36"],"import { \n  Button, \n  Form, \n  Row, \n  Col, \n  InputGroup, \n  FormControl,\n  ToggleButtonGroup,\n  ToggleButton\n} from 'react-bootstrap'\nimport {\n  ContainerSignUp,\n  ContainerHeadButtons,\n  ContainerForm,\n  MiniContainer,\n  Background,\n  FormAlert\n} from '../components/signUp/signUpStyle'\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { gql, useLazyQuery , useMutation } from '@apollo/client'\n\nconst SIGN_IN = gql`\n  query SignIn( $email: String!, $password: String! ) {\n    signIn(input: {\n      email: $email\n      password: $password\n    }) {\n      _id\n      name\n      email\n    }\n  }\n`\nconst SIGN_UP = gql`\n  mutation signUp( $name: String!, $email: String!, $password: String! ) {\n    createUser(input: {\n      name: $name\n      email: $email\n      password: $password\n    }) {\n      _id\n      name\n      email\n    }\n  }\n`\n\nfunction Home () {\n\n  const history = useHistory()\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [passwordConfirm, setPasswordConfirm] = useState('')\n  const [errors, setErrors] = useState({})\n  const [form, setForm] = useState(1)\n  const [ getUser, { signInLoading, data}] = useLazyQuery(SIGN_IN)\n  const [ \n    signUp,\n    { \n      loading: mutationLoading, \n      error: mutationError \n    } \n  ] = useMutation(SIGN_UP, { onError: (error) => setErrors({email: error.message, emailMessage: 'Correo ya esta en uso'}) }) \n\n  //const { data, loading: queryLoading, error: queryError } = useQuery(GET_USERS) \n\n  const validate = () => {\n    const isCorrectPassword = !!password && !!passwordConfirm && password === passwordConfirm\n\n    if(!isCorrectPassword) {\n      setErrors({ password: 'La contraseña no coincide' })\n      return false\n    }\n    setErrors({ password: '' })\n    return true\n  }\n\n  const handleChange = (e) => {\n    const { id, value } = e.target\n    switch(id) {\n      case 'name':\n        setName(value)\n        break\n      case 'email':\n        setEmail(value)\n        break\n      case 'password':\n        setPassword(value)\n        break\n      case 'passwordConfirm':\n        setPasswordConfirm(value)\n        break\n      default: break\n    }\n  }\n\n  const handleForm = (val) => {\n    setForm(val)\n  }\n\n  const handleSubmitSignUp = async (e) => {\n    e.preventDefault()\n    if(validate()) {\n      try {\n        const newUser = await signUp({ variables: { name, email, password }})\n        if(newUser) {\n          history.push(`/dashboard`)\n        }\n\n      }catch(error) {\n        setErrors({signUp: 'Error en la creacion de usuario'})\n      }finally {\n        setErrors({signUp: ''})\n      }\n    }\n  }\n\n  const handleSubmitSignIn = (e) => {\n    e.preventDefault()\n      try {\n        getUser({ variables: { email, password }})\n          console.log(data.signIn._id)\n        if(data.signIn._id) {\n          history.push('/dashboard')\n        }\n      }catch(error) {\n        setErrors({ signIn: 'email o contraseña incorrectos'})\n      }finally {\n        setErrors({ signIn: ''})\n      }\n  }\n\n  return (\n    <Background>\n      <ContainerSignUp>\n        <ContainerHeadButtons>\n          <ToggleButtonGroup type=\"radio\" name=\"formOption\" value={form} defaultValue={1} onChange={handleForm}>\n            <ToggleButton variant=\"outline-info\" value={1}>Registrarse</ToggleButton>\n            <ToggleButton variant=\"outline-info\" value={2}>Ingresar</ToggleButton>\n          </ToggleButtonGroup>\n        </ContainerHeadButtons>\n        {form === 1 &&\n        <ContainerForm>\n          <Form>\n            <Form.Group as={Row} controlId=\"name\">\n              <Col xs=\"auto\">\n                <Form.Label srOnly>\n                  name\n                </Form.Label>\n                <InputGroup className=\"mb-2\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text>@</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl \n                    type=\"name\"\n                    value={name}\n                    placeholder=\"Nombre\"\n                    onChange={handleChange}\n                  />\n                </InputGroup>\n                <Form.Text>\n                </Form.Text>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"email\">\n              <Col xs=\"auto\">\n                <Form.Label srOnly>\n                  email\n                </Form.Label>\n                <InputGroup className=\"mb-2\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text>@</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl \n                    type=\"email\"\n                    value={email}\n                    placeholder=\"Correo electrónico\"\n                    onChange={handleChange}\n                  />\n                </InputGroup>\n                <Form.Text>\n                </Form.Text>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"password\">\n              <Col xs=\"auto\">\n                <Form.Label srOnly>\n                  Contraseña\n                </Form.Label>\n                <InputGroup className=\"mb-2\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text>@</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl \n                    type=\"password\"\n                    value={password}\n                    placeholder=\"Contraseña\"\n                    onChange={handleChange}\n                  />\n                </InputGroup>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"passwordConfirm\">\n              <Col xs=\"auto\">\n                <Form.Label srOnly>\n                  Confirme contraseña\n                </Form.Label>\n                <InputGroup className=\"mb-2\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text>@</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl \n                    type=\"password\"\n                    value={passwordConfirm}\n                    placeholder=\"Confirmar contraseña\"\n                    onChange={handleChange}\n                  />\n                </InputGroup>\n                <Form.Text>\n                  <FormAlert>{errors.password}{errors.emailMessage}</FormAlert>\n                </Form.Text>\n              </Col>\n            </Form.Group>\n            <Form.Group>\n              <Col xs=\"auto\">\n                <Button \n                  type=\"submit\"\n                  className=\"mb-2\"\n                  onClick={handleSubmitSignUp}\n                >\n                  Registrar\n                </Button>\n              </Col>\n                 {mutationLoading && <p>Creando nuevo usuario</p>}\n            </Form.Group>\n              </Form>\n        </ContainerForm>\n        }\n    { form === 2 &&\n        <ContainerForm>\n          <Form>\n            <Form.Group as={Row} controlId=\"email\">\n              <Col xs=\"auto\">\n                <Form.Label srOnly>\n                  email\n                </Form.Label>\n                <InputGroup className=\"mb-2\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text>@</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl \n                    type=\"email\"\n                    value={email}\n                    placeholder=\"Correo electrónico\"\n                    onChange={handleChange}\n                  />\n                </InputGroup>\n                <Form.Text>\n                </Form.Text>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"password\">\n              <Col xs=\"auto\">\n                <Form.Label srOnly>\n                  Contraseña\n                </Form.Label>\n                <InputGroup className=\"mb-2\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text>@</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl \n                    type=\"password\"\n                    value={password}\n                    placeholder=\"Contraseña\"\n                    onChange={handleChange}\n                  />\n                </InputGroup>\n              </Col>\n            </Form.Group>\n              <FormAlert>{errors.signIn}</FormAlert>\n            <Form.Group>\n              <Col xs=\"auto\">\n                <Button \n                  type=\"submit\"\n                  className=\"mb-2\"\n                  onClick={handleSubmitSignIn}\n                >\n                  Ingresar\n                </Button>\n              </Col>\n                 {signInLoading && <p>Ingresando..</p>}\n            </Form.Group>\n              </Form>\n        </ContainerForm>\n    }\n      </ContainerSignUp>\n    </Background>\n  )\n}\n\nexport default Home \n","/home/andres/makeitreal/repos/StackTraining/stack-training-frontend/src/index.js",[],["37","38"],"/home/andres/makeitreal/repos/StackTraining/stack-training-frontend/src/components/signUp/signUpStyle.js",[],"/home/andres/makeitreal/repos/StackTraining/stack-training-frontend/src/pages/Dashboard.js",[],"/home/andres/makeitreal/repos/StackTraining/stack-training-frontend/src/config/theme.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":15,"column":3,"nodeType":"45","messageId":"46","endLine":15,"endColumn":16},{"ruleId":"43","severity":1,"message":"47","line":63,"column":14,"nodeType":"45","messageId":"46","endLine":63,"endColumn":27},{"ruleId":"39","replacedBy":"48"},{"ruleId":"41","replacedBy":"49"},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'MiniContainer' is defined but never used.","Identifier","unusedVar","'mutationError' is assigned a value but never used.",["50"],["51"],"no-global-assign","no-unsafe-negation"]